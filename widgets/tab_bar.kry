# widgets/tab_bar.kry

# --- Base Styles ---

style "tab_bar_style_base_row" {
    background_color: #1A1A1AFF
    height: 50
    layout: row # Arrange tab items horizontally
    # Optional: property_gap: 4
}

style "tab_bar_style_base_column" {
    # Style for vertical orientation
    background_color: #1A1A1AFF
    width: 60
    layout: column # Arrange tab items vertically
    # Optional: property_gap: 4
}

style "tab_item_style_base" {
    # Default style for items inside the TabBar (e.g., Buttons).
    background_color: #404040FF
    border_width: 0
    text_alignment: center
    text_color: #E0E0E0FF
    # Optional: property_padding: 5
}

style "tab_item_style_active_base" {
    # Style for the active/selected tab item.
    extends: "tab_item_style_base"
    background_color: #5070A0FF
    text_color: #FFFFFFFF
}

# --- Widget Definition: TabBar ---
# Compiler expands <TabBar> usage into a Container.
Define TabBar {

    # Accepted properties for <TabBar> usage.
    Properties {
        # Layout *inside* the bar: "row" or "column". Affects default style.
        orientation: String = "row"

        # Placement hint *relative to siblings*: "top", "bottom", "left", "right".
        # Used by compiler to adjust parent layout & child order. Consumed by compiler.
        position: String = "bottom"

        # Optional style ID to override default bar container style.
        bar_style: StyleID = ""
    }

    # Root Element Structure (Result of compiler expansion)
    Container {
        # Compiler determines the final 'style' property based on usage:
        # 1. 'bar_style' property from usage.
        # 2. 'style' property directly on <TabBar> usage tag.
        # 3. Default style based on 'orientation' ('tab_bar_style_base_row' or '_column').
        # Compiler merges standard properties (id, width, height) from usage here.
        # Compiler inserts children (e.g., Buttons) from usage inside this Container.
    }
}