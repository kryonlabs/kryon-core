// impl/js/prepare_dist.mjs (or .js)
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Helper to get __dirname equivalent in ES Modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename); // This is /path/to/kryon/impl/js

// --- Configuration ---
const projectRoot = path.join(__dirname, '../../');
const examplesSourceDir = path.join(projectRoot, 'examples');
const jsSourceDir = __dirname;
const outputDir = path.join(__dirname, 'dist');
const examplesOutputDir = path.join(outputDir, 'examples'); // For .krb files ONLY
const manifestOutputFile = path.join(__dirname, 'example-manifest.js');
const buildScriptName = path.basename(__filename);
const imageExtensions = ['.png', '.jpg', '.jpeg', '.gif', '.webp', '.svg']; // Add other image types if needed
// --- End Configuration ---

console.log('Preparing distribution directory inside impl/js...');
console.log(`Project Root detected: ${projectRoot}`);

try {
    // 1. Clean and Ensure output directories exist
    if (fs.existsSync(outputDir)) {
        console.log(`Cleaning existing dist directory: ${outputDir}`);
        fs.rmSync(outputDir, { recursive: true, force: true });
    }
    fs.mkdirSync(outputDir, { recursive: true });
    fs.mkdirSync(examplesOutputDir, { recursive: true }); // For .krb files

    // 2. Read source examples directory
    console.log(`Reading examples source: ${examplesSourceDir}`);
    if (!fs.existsSync(examplesSourceDir)) {
        throw new Error(`Examples source directory not found: ${examplesSourceDir}`);
    }
    const allExampleFiles = fs.readdirSync(examplesSourceDir);

    // 3. Process files from examplesSourceDir
    const krbFilesForManifest = [];
    let copiedKrbCount = 0;
    let copiedImageCount = 0;

    console.log(`Processing files from ${path.relative(projectRoot, examplesSourceDir)}...`);
    allExampleFiles.forEach(file => {
        const sourcePath = path.join(examplesSourceDir, file);
        const fileStats = fs.statSync(sourcePath);

        // Skip directories for now
        if (!fileStats.isFile()) {
            console.log(` - Skipping directory: ${file}`);
            return;
        }

        const fileExt = path.extname(file).toLowerCase();

        if (fileExt === '.krb') {
            // Copy .krb files to dist/examples/
            const destPath = path.join(examplesOutputDir, file);
            fs.copyFileSync(sourcePath, destPath);
            krbFilesForManifest.push(file); // Add to manifest list
            copiedKrbCount++;
            // console.log(`   Copied KRB: ${file} -> ${path.relative(projectRoot, destPath)}`);
        } else if (imageExtensions.includes(fileExt)) {
            // Copy image files to dist/ (root)
            const destPath = path.join(outputDir, file);
            fs.copyFileSync(sourcePath, destPath);
            copiedImageCount++;
            // console.log(`   Copied Image: ${file} -> ${path.relative(projectRoot, destPath)}`);
        } else {
            // Log other files found but not copied (like .kry source files)
            // console.log(`   Skipping non-KRB/non-Image file: ${file}`);
        }
    });
    console.log(`Copied ${copiedKrbCount} KRB files to ${path.relative(projectRoot, examplesOutputDir)}`);
    console.log(`Copied ${copiedImageCount} Image files to ${path.relative(projectRoot, outputDir)}`);


    // 4. Generate the manifest file content using only the found .krb files
    console.log('Found KRB example files for manifest:', krbFilesForManifest);
    const manifestContent = `// Auto-generated by ${buildScriptName}\n// Contains list of KRB files found in /examples\n\nexport const exampleFiles = ${JSON.stringify(krbFilesForManifest, null, 2)};\n`;

    // 5. Write the manifest file into the *source* JS directory (./)
    fs.writeFileSync(manifestOutputFile, manifestContent, 'utf8');
    console.log(`Generated manifest: ${path.relative(projectRoot, manifestOutputFile)}`);

    // 6. Copy *all* files from jsSourceDir (./) to the root of outputDir (./dist)
    console.log(`Copying JS/HTML source from: ${path.relative(projectRoot, jsSourceDir)}...`);
    const sourceJsFiles = fs.readdirSync(jsSourceDir);
    let copiedJsCount = 0;
    sourceJsFiles.forEach(file => {
        // CRITICAL: Exclude the output directory and this build script itself!
        if (file === path.basename(outputDir) || file === buildScriptName) {
            // console.log(` - Skipping ${file}`);
            return;
        }

        const sourcePath = path.join(jsSourceDir, file);
        const destPath = path.join(outputDir, file);
        if (fs.statSync(sourcePath).isFile()) {
            fs.copyFileSync(sourcePath, destPath);
            copiedJsCount++;
        }
        // Add recursive copy here if needed for subdirs within impl/js
    });
    console.log(`Copied ${copiedJsCount} JS/HTML/CSS files to ${path.relative(projectRoot, outputDir)}`);


    console.log(`\nDistribution prepared in '${path.relative(projectRoot, outputDir)}' directory.`);
    console.log(`To run: cd ${path.relative(projectRoot, outputDir)} && npx serve`);
    console.log(`Or point your local server to: ${outputDir}`);

} catch (error) {
    console.error('\nError during distribution preparation:', error);
    process.exit(1); // Indicate failure
}